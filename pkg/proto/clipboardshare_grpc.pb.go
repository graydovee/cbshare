// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: proto/clipboardshare.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClipboardClient is the client API for Clipboard service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClipboardClient interface {
	UpdateClipboardMsg(ctx context.Context, in *UpdateClipboardMsgRequest, opts ...grpc.CallOption) (*UpdateClipboardMsgResponse, error)
	GetClipboardMsg(ctx context.Context, in *GetClipboardMsgRequest, opts ...grpc.CallOption) (*GetClipboardMsgResponse, error)
}

type clipboardClient struct {
	cc grpc.ClientConnInterface
}

func NewClipboardClient(cc grpc.ClientConnInterface) ClipboardClient {
	return &clipboardClient{cc}
}

func (c *clipboardClient) UpdateClipboardMsg(ctx context.Context, in *UpdateClipboardMsgRequest, opts ...grpc.CallOption) (*UpdateClipboardMsgResponse, error) {
	out := new(UpdateClipboardMsgResponse)
	err := c.cc.Invoke(ctx, "/proto.Clipboard/UpdateClipboardMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clipboardClient) GetClipboardMsg(ctx context.Context, in *GetClipboardMsgRequest, opts ...grpc.CallOption) (*GetClipboardMsgResponse, error) {
	out := new(GetClipboardMsgResponse)
	err := c.cc.Invoke(ctx, "/proto.Clipboard/GetClipboardMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClipboardServer is the server API for Clipboard service.
// All implementations must embed UnimplementedClipboardServer
// for forward compatibility
type ClipboardServer interface {
	UpdateClipboardMsg(context.Context, *UpdateClipboardMsgRequest) (*UpdateClipboardMsgResponse, error)
	GetClipboardMsg(context.Context, *GetClipboardMsgRequest) (*GetClipboardMsgResponse, error)
	mustEmbedUnimplementedClipboardServer()
}

// UnimplementedClipboardServer must be embedded to have forward compatible implementations.
type UnimplementedClipboardServer struct {
}

func (UnimplementedClipboardServer) UpdateClipboardMsg(context.Context, *UpdateClipboardMsgRequest) (*UpdateClipboardMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClipboardMsg not implemented")
}
func (UnimplementedClipboardServer) GetClipboardMsg(context.Context, *GetClipboardMsgRequest) (*GetClipboardMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClipboardMsg not implemented")
}
func (UnimplementedClipboardServer) mustEmbedUnimplementedClipboardServer() {}

// UnsafeClipboardServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClipboardServer will
// result in compilation errors.
type UnsafeClipboardServer interface {
	mustEmbedUnimplementedClipboardServer()
}

func RegisterClipboardServer(s grpc.ServiceRegistrar, srv ClipboardServer) {
	s.RegisterService(&Clipboard_ServiceDesc, srv)
}

func _Clipboard_UpdateClipboardMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClipboardMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClipboardServer).UpdateClipboardMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Clipboard/UpdateClipboardMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClipboardServer).UpdateClipboardMsg(ctx, req.(*UpdateClipboardMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clipboard_GetClipboardMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClipboardMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClipboardServer).GetClipboardMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Clipboard/GetClipboardMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClipboardServer).GetClipboardMsg(ctx, req.(*GetClipboardMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Clipboard_ServiceDesc is the grpc.ServiceDesc for Clipboard service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Clipboard_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Clipboard",
	HandlerType: (*ClipboardServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateClipboardMsg",
			Handler:    _Clipboard_UpdateClipboardMsg_Handler,
		},
		{
			MethodName: "GetClipboardMsg",
			Handler:    _Clipboard_GetClipboardMsg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/clipboardshare.proto",
}
